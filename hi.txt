 {/* <BrowserRouter>
        {!user ? (<LoginScreen/>) :(
        <Routes>
          <Route path="/" element={<Home />} />

        </Routes>)}
        {/* <Routes>
          <Route path="/" element={<HomeScreen />} />

        </Routes> */}
      </BrowserRouter>
       */}


       movies



       ( movies || [])



       <BrowserRouter>
        
        <Routes>
          <Route path="/" element={<Home />} />

        </Routes>
        {/* <Routes>
          <Route path="/" element={<HomeScreen />} />

        </Routes> */}
      </BrowserRouter>




      increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });



       <img
            src={`${apiImageAddress}w300${movie.poster_path}`}
            alt="movie_picture"
          />

        <img
  src={movie.poster_path ? `${apiImageAddress}w300${movie.poster_path}` : ''}
  alt="movie_picture"
/>